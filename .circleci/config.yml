version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter
      workflow_id:
        type: string
    steps:
      - run:
          name: Delete S3 content
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-kk1j287eryppmz437 --recursive
            exit 0
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-kk1j287eryppmz437
            aws cloudformation delete-stack --stack-name udapeople-frontend-kk1j287eryppmz437
            exit 0

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here
      workflow_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/AbaPdhZojyXT498ued9hJ9/migration_kk1j287eryppmz437)
            if (($SUCCESS == 1))
            then
              cd ~/project/backend
              npm install
              npm run build
              npm run migrations:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: cimg/node:14.17.4
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: cimg/node:14.17.4
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: cimg/node:14.17.4
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [test-frontend]
      - run:
          name: Run frontend test
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: test-frontend

  test-backend:
    docker:
      - image: cimg/node:14.17.4
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [test-backend]
      - run:
          name: Run backend test
          command: |
            cd backend
            npm install
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: test-backend

  scan-frontend:
    docker:
      - image: cimg/node:14.17.4
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [scan-frontend]
      - run:
          name: Scan Frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
      - save_cache:
          paths: [ frontend/node_modules ]
          key: scan-frontend
          
  scan-backend:
    docker:
      - image: cimg/node:14.17.4
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [scan-backend]
      - run:
          name: Scan Backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
      - save_cache:
          paths: [ backend/node_modules ]
          key: scan-backend
          
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar, gzip, git
          command: yum -y install tar gzip git
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            # Use the workflow id to mark your CloudFormation stacks so that you can reference them later on (ex: rollback). 
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-kk1j287eryppmz437" \
              --parameter-overrides ID="kk1j287eryppmz437"

      - run:
          name: Ensure front-end infrastructure exists
          command: |
            # Use the workflow id to mark your CloudFormation stacks so that you can reference them later on (ex: rollback). 
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-kk1j287eryppmz437" \
              --parameter-overrides ID="kk1j287eryppmz437"

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --query "Reservations[*].Instances[*].[PublicIpAddress]" \
            --filters "Name=tag:Name,Values=backend-kk1j287eryppmz437" \
            --output text >> ~/project/.circleci/ansible/inventory.txt
            cat ~/project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: kk1j287eryppmz437

  configure-infrastructure:
    docker:
      - image: python:3.10-alpine3.16
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["ea:79:14:82:10:58:56:7f:a4:90:50:c2:88:c0:3f:55"]
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache ansible tar gzip aws-cli openssh
      - run:
          name: Configure server
          command: |
            pwd
            cd .circleci/ansible
            ls -al
            ansible-playbook -i inventory.txt configure-server.yml
          no_output_timeout: 30m
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: kk1j287eryppmz437

  run-migrations:
    docker:
      - image: cimg/node:14.17.4
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: ~/.circleci/ansible/inventory.txt
      - run:
          name: Install AWS CLI dependencies
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                curl --insecure https://kvdb.io/AbaPdhZojyXT498ued9hJ9/migration_kk1j287eryppmz437 -d '1'
            fi
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: kk1j287eryppmz437
      - revert-migrations:
          workflow_id: kk1j287eryppmz437

  deploy-frontend:
    docker:
      - image: python:3.10-alpine3.16
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar
            apk add --update --no-cache gzip
            apk add --update --no-cache nodejs
            apk add --update --no-cache npm
            apk add --update --no-cache aws-cli
            apk add --update --no-cache curl
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query "Reservations[*].Instances[*].[PublicIpAddress]" \
            --filters "Name=tag:Name,Values=backend-kk1j287eryppmz437" \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL=${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-kk1j287eryppmz437.tar.gz dist
            aws s3 cp dist s3://udapeople-kk1j287eryppmz437 --recursive

      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: kk1j287eryppmz437
      - revert-migrations:
          workflow_id: kk1j287eryppmz437

  deploy-backend:
    docker:
      - image: python:3.10-alpine3.16
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["ea:79:14:82:10:58:56:7f:a4:90:50:c2:88:c0:3f:55"]
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar gzip nodejs npm aws-cli curl ansible
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            ## Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: kk1j287eryppmz437
      - revert-migrations:
          workflow_id: kk1j287eryppmz437

  smoke-test:
    docker:
      - image: python:3.10-alpine3.16
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar gzip nodejs npm curl aws-cli

      - run:
          name: Get backend url and Backend smoke test.
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query "Reservations[*].Instances[*].[PublicIpAddress]" \
            --filters "Name=tag:Name,Values=backend-kk1j287eryppmz437" \
            --output text)
            echo ${BACKEND_IP}

            export BACKEND=$(echo $BACKEND_IP | grep -o '[^ ]*$')

            echo $BACKEND
            export API_URL="http://${BACKEND}:3030"
            echo "API_URL=${API_URL}"

            echo "Sleeping for 1 minute"
            sleep 600

            if curl -v "${API_URL}/api/status" | grep "ok"
            then
              return 0
            else
              return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-kk1j287eryppmz437.s3-website-us-east-1.amazonaws.com/#/employees"

            echo ${URL}

            if curl -s ${URL} | grep "Welcome"
            then
              # Change this to 0 after the job fails
              return 0
            else
              return 1
            fi

      - destroy-environment:
          workflow_id: kk1j287eryppmz437
      - revert-migrations:
          workflow_id: kk1j287eryppmz437

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OldWorkflowID="the id here"
            export STACKS=[] #put the list of stacks here
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              # your code here
            fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [project-3]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
